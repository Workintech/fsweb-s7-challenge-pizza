{"ast":null,"code":"import { select } from \"d3\";\nimport { serialize, compile, stringify } from \"stylis\";\nimport { g as getConfig, l as log, f as setConfig, h as getSiteConfig, u as updateSiteConfig, r as reset, i as defaultConfig, s as setLogLevel, a as addDirective, j as evaluate, k as saveConfigFromInitialize, t as theme, m as setSiteConfig } from \"./config-5161385b.js\";\nimport { a as registerDiagram, r as registerLazyLoadedDiagrams, d as detectType, g as getDiagram, e as extractFrontMatter, b as getDiagramLoader, U as UnknownDiagramError, p as parseDirective, u as utils, c as directiveSanitizer, f as getStyles } from \"./utils-3cbdbddf.js\";\nimport { r as renderer } from \"./errorRenderer-11917bdc.js\";\nimport DOMPurify from \"dompurify\";\nimport isEmpty from \"lodash-es/isEmpty.js\";\nconst version = \"10.0.0\";\nconst id$i = \"c4\";\nconst detector$i = txt => {\n  return txt.match(/^\\s*C4Context|C4Container|C4Component|C4Dynamic|C4Deployment/) !== null;\n};\nconst loader$i = async () => {\n  const {\n    diagram\n  } = await import(\"./c4Diagram-2ae3841a.js\");\n  return {\n    id: id$i,\n    diagram\n  };\n};\nconst plugin$i = {\n  id: id$i,\n  detector: detector$i,\n  loader: loader$i\n};\nconst c4 = plugin$i;\nconst id$h = \"flowchart\";\nconst detector$h = (txt, config) => {\n  var _a, _b;\n  if (((_a = config == null ? void 0 : config.flowchart) == null ? void 0 : _a.defaultRenderer) === \"dagre-wrapper\") {\n    return false;\n  }\n  if (((_b = config == null ? void 0 : config.flowchart) == null ? void 0 : _b.defaultRenderer) === \"elk\") {\n    return false;\n  }\n  return txt.match(/^\\s*graph/) !== null;\n};\nconst loader$h = async () => {\n  const {\n    diagram\n  } = await import(\"./flowDiagram-ee152de2.js\");\n  return {\n    id: id$h,\n    diagram\n  };\n};\nconst plugin$h = {\n  id: id$h,\n  detector: detector$h,\n  loader: loader$h\n};\nconst flowchart = plugin$h;\nconst id$g = \"flowchart-v2\";\nconst detector$g = (txt, config) => {\n  var _a, _b;\n  if (((_a = config == null ? void 0 : config.flowchart) == null ? void 0 : _a.defaultRenderer) === \"dagre-d3\") {\n    return false;\n  }\n  if (((_b = config == null ? void 0 : config.flowchart) == null ? void 0 : _b.defaultRenderer) === \"elk\") {\n    return false;\n  }\n  if (txt.match(/^\\s*graph/) !== null) {\n    return true;\n  }\n  return txt.match(/^\\s*flowchart/) !== null;\n};\nconst loader$g = async () => {\n  const {\n    diagram\n  } = await import(\"./flowDiagram-v2-566a30e4.js\");\n  return {\n    id: id$g,\n    diagram\n  };\n};\nconst plugin$g = {\n  id: id$g,\n  detector: detector$g,\n  loader: loader$g\n};\nconst flowchartV2 = plugin$g;\nconst id$f = \"er\";\nconst detector$f = txt => {\n  return txt.match(/^\\s*erDiagram/) !== null;\n};\nconst loader$f = async () => {\n  const {\n    diagram\n  } = await import(\"./erDiagram-508b3995.js\");\n  return {\n    id: id$f,\n    diagram\n  };\n};\nconst plugin$f = {\n  id: id$f,\n  detector: detector$f,\n  loader: loader$f\n};\nconst er = plugin$f;\nconst id$e = \"gitGraph\";\nconst detector$e = txt => {\n  return txt.match(/^\\s*gitGraph/) !== null;\n};\nconst loader$e = async () => {\n  const {\n    diagram\n  } = await import(\"./gitGraphDiagram-e326c88e.js\");\n  return {\n    id: id$e,\n    diagram\n  };\n};\nconst plugin$e = {\n  id: id$e,\n  detector: detector$e,\n  loader: loader$e\n};\nconst git = plugin$e;\nconst id$d = \"gantt\";\nconst detector$d = txt => {\n  return txt.match(/^\\s*gantt/) !== null;\n};\nconst loader$d = async () => {\n  const {\n    diagram\n  } = await import(\"./ganttDiagram-18b8bb1d.js\");\n  return {\n    id: id$d,\n    diagram\n  };\n};\nconst plugin$d = {\n  id: id$d,\n  detector: detector$d,\n  loader: loader$d\n};\nconst gantt = plugin$d;\nconst id$c = \"info\";\nconst detector$c = txt => {\n  return txt.match(/^\\s*info/) !== null;\n};\nconst loader$c = async () => {\n  const {\n    diagram\n  } = await import(\"./infoDiagram-cc60b1ac.js\");\n  return {\n    id: id$c,\n    diagram\n  };\n};\nconst plugin$c = {\n  id: id$c,\n  detector: detector$c,\n  loader: loader$c\n};\nconst info = plugin$c;\nconst id$b = \"pie\";\nconst detector$b = txt => {\n  return txt.match(/^\\s*pie/) !== null;\n};\nconst loader$b = async () => {\n  const {\n    diagram\n  } = await import(\"./pieDiagram-00db3e06.js\");\n  return {\n    id: id$b,\n    diagram\n  };\n};\nconst plugin$b = {\n  id: id$b,\n  detector: detector$b,\n  loader: loader$b\n};\nconst pie = plugin$b;\nconst id$a = \"requirement\";\nconst detector$a = txt => {\n  return txt.match(/^\\s*requirement(Diagram)?/) !== null;\n};\nconst loader$a = async () => {\n  const {\n    diagram\n  } = await import(\"./requirementDiagram-61f3cb14.js\");\n  return {\n    id: id$a,\n    diagram\n  };\n};\nconst plugin$a = {\n  id: id$a,\n  detector: detector$a,\n  loader: loader$a\n};\nconst requirement = plugin$a;\nconst id$9 = \"sequence\";\nconst detector$9 = txt => {\n  return txt.match(/^\\s*sequenceDiagram/) !== null;\n};\nconst loader$9 = async () => {\n  const {\n    diagram\n  } = await import(\"./sequenceDiagram-2682829a.js\");\n  return {\n    id: id$9,\n    diagram\n  };\n};\nconst plugin$9 = {\n  id: id$9,\n  detector: detector$9,\n  loader: loader$9\n};\nconst sequence = plugin$9;\nconst id$8 = \"class\";\nconst detector$8 = (txt, config) => {\n  var _a;\n  if (((_a = config == null ? void 0 : config.class) == null ? void 0 : _a.defaultRenderer) === \"dagre-wrapper\") {\n    return false;\n  }\n  return txt.match(/^\\s*classDiagram/) !== null;\n};\nconst loader$8 = async () => {\n  const {\n    diagram\n  } = await import(\"./classDiagram-58722808.js\");\n  return {\n    id: id$8,\n    diagram\n  };\n};\nconst plugin$8 = {\n  id: id$8,\n  detector: detector$8,\n  loader: loader$8\n};\nconst classDiagram = plugin$8;\nconst id$7 = \"classDiagram\";\nconst detector$7 = (txt, config) => {\n  var _a;\n  if (txt.match(/^\\s*classDiagram/) !== null && ((_a = config == null ? void 0 : config.class) == null ? void 0 : _a.defaultRenderer) === \"dagre-wrapper\") {\n    return true;\n  }\n  return txt.match(/^\\s*classDiagram-v2/) !== null;\n};\nconst loader$7 = async () => {\n  const {\n    diagram\n  } = await import(\"./classDiagram-v2-4cc74290.js\");\n  return {\n    id: id$7,\n    diagram\n  };\n};\nconst plugin$7 = {\n  id: id$7,\n  detector: detector$7,\n  loader: loader$7\n};\nconst classDiagramV2 = plugin$7;\nconst id$6 = \"state\";\nconst detector$6 = (txt, config) => {\n  var _a;\n  if (((_a = config == null ? void 0 : config.state) == null ? void 0 : _a.defaultRenderer) === \"dagre-wrapper\") {\n    return false;\n  }\n  return txt.match(/^\\s*stateDiagram/) !== null;\n};\nconst loader$6 = async () => {\n  const {\n    diagram\n  } = await import(\"./stateDiagram-224b91ac.js\");\n  return {\n    id: id$6,\n    diagram\n  };\n};\nconst plugin$6 = {\n  id: id$6,\n  detector: detector$6,\n  loader: loader$6\n};\nconst state = plugin$6;\nconst id$5 = \"stateDiagram\";\nconst detector$5 = (text, config) => {\n  var _a, _b;\n  if (text.match(/^\\s*stateDiagram-v2/) !== null) {\n    return true;\n  }\n  if (text.match(/^\\s*stateDiagram/) && ((_a = config == null ? void 0 : config.state) == null ? void 0 : _a.defaultRenderer) === \"dagre-wrapper\") {\n    return true;\n  }\n  if (text.match(/^\\s*stateDiagram/) && ((_b = config == null ? void 0 : config.state) == null ? void 0 : _b.defaultRenderer) === \"dagre-wrapper\") {\n    return true;\n  }\n  return false;\n};\nconst loader$5 = async () => {\n  const {\n    diagram\n  } = await import(\"./stateDiagram-v2-03fb723d.js\");\n  return {\n    id: id$5,\n    diagram\n  };\n};\nconst plugin$5 = {\n  id: id$5,\n  detector: detector$5,\n  loader: loader$5\n};\nconst stateV2 = plugin$5;\nconst id$4 = \"journey\";\nconst detector$4 = txt => {\n  return txt.match(/^\\s*journey/) !== null;\n};\nconst loader$4 = async () => {\n  const {\n    diagram\n  } = await import(\"./journeyDiagram-37931021.js\");\n  return {\n    id: id$4,\n    diagram\n  };\n};\nconst plugin$4 = {\n  id: id$4,\n  detector: detector$4,\n  loader: loader$4\n};\nconst journey = plugin$4;\nconst id$3 = \"error\";\nconst detector$3 = text => {\n  return text.toLowerCase().trim() === \"error\";\n};\nconst loader$3 = async () => {\n  const {\n    diagram\n  } = await import(\"./errorDiagram-c771b856.js\");\n  return {\n    id: id$3,\n    diagram\n  };\n};\nconst plugin$3 = {\n  id: id$3,\n  detector: detector$3,\n  loader: loader$3\n};\nconst error = plugin$3;\nconst id$2 = \"flowchart-elk\";\nconst detector$2 = (txt, config) => {\n  var _a;\n  if (\n  // If diagram explicitly states flowchart-elk\n  txt.match(/^\\s*flowchart-elk/) ||\n  // If a flowchart/graph diagram has their default renderer set to elk\n  txt.match(/^\\s*flowchart|graph/) && ((_a = config == null ? void 0 : config.flowchart) == null ? void 0 : _a.defaultRenderer) === \"elk\") {\n    return true;\n  }\n  return false;\n};\nconst loader$2 = async () => {\n  const {\n    diagram\n  } = await import(\"./flowchart-elk-definition-99086e81.js\");\n  return {\n    id: id$2,\n    diagram\n  };\n};\nconst plugin$2 = {\n  id: id$2,\n  detector: detector$2,\n  loader: loader$2\n};\nconst flowchartElk = plugin$2;\nconst id$1 = \"timeline\";\nconst detector$1 = txt => {\n  return txt.match(/^\\s*timeline/) !== null;\n};\nconst loader$1 = async () => {\n  const {\n    diagram\n  } = await import(\"./timeline-definition-bc3d9443.js\");\n  return {\n    id: id$1,\n    diagram\n  };\n};\nconst plugin$1 = {\n  id: id$1,\n  detector: detector$1,\n  loader: loader$1\n};\nconst timeline = plugin$1;\nconst id = \"mindmap\";\nconst detector = txt => {\n  return txt.match(/^\\s*mindmap/) !== null;\n};\nconst loader = async () => {\n  const {\n    diagram\n  } = await import(\"./mindmap-definition-2a1985ac.js\");\n  return {\n    id,\n    diagram\n  };\n};\nconst plugin = {\n  id,\n  detector,\n  loader\n};\nconst mindmap = plugin;\nlet hasLoadedDiagrams = false;\nconst addDiagrams = () => {\n  if (hasLoadedDiagrams) {\n    return;\n  }\n  hasLoadedDiagrams = true;\n  registerDiagram(\"---\",\n  // --- diagram type may appear if YAML front-matter is not parsed correctly\n  {\n    db: {\n      clear: () => {}\n    },\n    styles: {},\n    // should never be used\n    renderer: {},\n    // should never be used\n    parser: {\n      parser: {\n        yy: {}\n      },\n      parse: () => {\n        throw new Error(\"Diagrams beginning with --- are not valid. If you were trying to use a YAML front-matter, please ensure that you've correctly opened and closed the YAML front-matter with unindented `---` blocks\");\n      }\n    },\n    init: () => null\n    // no op\n  }, text => {\n    return text.toLowerCase().trimStart().startsWith(\"---\");\n  });\n  registerLazyLoadedDiagrams(error, c4, classDiagram, classDiagramV2, er, gantt, info, pie, requirement, sequence, flowchart, flowchartV2, flowchartElk, mindmap, timeline, git, state, stateV2, journey);\n};\nclass Diagram {\n  constructor(text) {\n    var _a, _b;\n    this.text = text;\n    this.type = \"graph\";\n    this.text += \"\\n\";\n    const cnf = getConfig();\n    try {\n      this.type = detectType(text, cnf);\n    } catch (e) {\n      this.type = \"error\";\n      this.detectError = e;\n    }\n    const diagram = getDiagram(this.type);\n    log.debug(\"Type \" + this.type);\n    this.db = diagram.db;\n    (_b = (_a = this.db).clear) == null ? void 0 : _b.call(_a);\n    this.renderer = diagram.renderer;\n    this.parser = diagram.parser;\n    const originalParse = this.parser.parse.bind(this.parser);\n    this.parser.parse = text2 => originalParse(extractFrontMatter(text2, this.db));\n    this.parser.parser.yy = this.db;\n    if (diagram.init) {\n      diagram.init(cnf);\n      log.info(\"Initialized diagram \" + this.type, cnf);\n    }\n    this.parse();\n  }\n  parse() {\n    var _a, _b;\n    if (this.detectError) {\n      throw this.detectError;\n    }\n    (_b = (_a = this.db).clear) == null ? void 0 : _b.call(_a);\n    this.parser.parse(this.text);\n  }\n  async render(id2, version2) {\n    await this.renderer.draw(this.text, id2, version2, this);\n  }\n  getParser() {\n    return this.parser;\n  }\n  getType() {\n    return this.type;\n  }\n}\nconst getDiagramFromText = async text => {\n  const type = detectType(text, getConfig());\n  try {\n    getDiagram(type);\n  } catch (error2) {\n    const loader2 = getDiagramLoader(type);\n    if (!loader2) {\n      throw new UnknownDiagramError(`Diagram ${type} not found.`);\n    }\n    const {\n      id: id2,\n      diagram\n    } = await loader2();\n    registerDiagram(id2, diagram);\n  }\n  return new Diagram(text);\n};\nlet interactionFunctions = [];\nconst addFunction = func => {\n  interactionFunctions.push(func);\n};\nconst attachFunctions = () => {\n  interactionFunctions.forEach(f => {\n    f();\n  });\n  interactionFunctions = [];\n};\nconst SVG_ROLE = \"graphics-document document\";\nfunction setA11yDiagramInfo(svg, diagramType) {\n  svg.attr(\"role\", SVG_ROLE);\n  if (!isEmpty(diagramType)) {\n    svg.attr(\"aria-roledescription\", diagramType);\n  }\n}\nfunction addSVGa11yTitleDescription(svg, a11yTitle, a11yDesc, baseId) {\n  if (svg.insert === void 0) {\n    return;\n  }\n  if (a11yTitle || a11yDesc) {\n    if (a11yDesc) {\n      const descId = \"chart-desc-\" + baseId;\n      svg.attr(\"aria-describedby\", descId);\n      svg.insert(\"desc\", \":first-child\").attr(\"id\", descId).text(a11yDesc);\n    }\n    if (a11yTitle) {\n      const titleId = \"chart-title-\" + baseId;\n      svg.attr(\"aria-labelledby\", titleId);\n      svg.insert(\"title\", \":first-child\").attr(\"id\", titleId).text(a11yTitle);\n    }\n  } else {\n    return;\n  }\n}\nconst CLASSDEF_DIAGRAMS = [\"graph\", \"flowchart\", \"flowchart-v2\", \"stateDiagram\", \"stateDiagram-v2\"];\nconst MAX_TEXTLENGTH = 5e4;\nconst MAX_TEXTLENGTH_EXCEEDED_MSG = \"graph TB;a[Maximum text size in diagram exceeded];style a fill:#faa\";\nconst SECURITY_LVL_SANDBOX = \"sandbox\";\nconst SECURITY_LVL_LOOSE = \"loose\";\nconst XMLNS_SVG_STD = \"http://www.w3.org/2000/svg\";\nconst XMLNS_XLINK_STD = \"http://www.w3.org/1999/xlink\";\nconst XMLNS_XHTML_STD = \"http://www.w3.org/1999/xhtml\";\nconst IFRAME_WIDTH = \"100%\";\nconst IFRAME_HEIGHT = \"100%\";\nconst IFRAME_STYLES = \"border:0;margin:0;\";\nconst IFRAME_BODY_STYLE = \"margin:0\";\nconst IFRAME_SANDBOX_OPTS = \"allow-top-navigation-by-user-activation allow-popups\";\nconst IFRAME_NOT_SUPPORTED_MSG = 'The \"iframe\" tag is not supported by your browser.';\nconst DOMPURIFY_TAGS = [\"foreignobject\"];\nconst DOMPURIFY_ATTR = [\"dominant-baseline\"];\nasync function parse(text, parseOptions) {\n  addDiagrams();\n  let error2;\n  try {\n    const diagram = await getDiagramFromText(text);\n    diagram.parse();\n  } catch (err) {\n    error2 = err;\n  }\n  if (parseOptions == null ? void 0 : parseOptions.suppressErrors) {\n    return error2 === void 0;\n  }\n  if (error2) {\n    throw error2;\n  }\n}\nconst encodeEntities = function (text) {\n  let txt = text;\n  txt = txt.replace(/style.*:\\S*#.*;/g, function (s) {\n    return s.substring(0, s.length - 1);\n  });\n  txt = txt.replace(/classDef.*:\\S*#.*;/g, function (s) {\n    return s.substring(0, s.length - 1);\n  });\n  txt = txt.replace(/#\\w+;/g, function (s) {\n    const innerTxt = s.substring(1, s.length - 1);\n    const isInt = /^\\+?\\d+$/.test(innerTxt);\n    if (isInt) {\n      return \"ﬂ°°\" + innerTxt + \"¶ß\";\n    } else {\n      return \"ﬂ°\" + innerTxt + \"¶ß\";\n    }\n  });\n  return txt;\n};\nconst decodeEntities = function (text) {\n  let txt = text;\n  txt = txt.replace(/ﬂ°°/g, \"&#\");\n  txt = txt.replace(/ﬂ°/g, \"&\");\n  txt = txt.replace(/¶ß/g, \";\");\n  return txt;\n};\nconst cssImportantStyles = (cssClass, element, cssClasses = []) => {\n  return `\n.${cssClass} ${element} { ${cssClasses.join(\" !important; \")} !important; }`;\n};\nconst createCssStyles = (config, graphType, classDefs = {}) => {\n  var _a;\n  let cssStyles = \"\";\n  if (config.themeCSS !== void 0) {\n    cssStyles += `\n${config.themeCSS}`;\n  }\n  if (config.fontFamily !== void 0) {\n    cssStyles += `\n:root { --mermaid-font-family: ${config.fontFamily}}`;\n  }\n  if (config.altFontFamily !== void 0) {\n    cssStyles += `\n:root { --mermaid-alt-font-family: ${config.altFontFamily}}`;\n  }\n  if (!isEmpty(classDefs) && CLASSDEF_DIAGRAMS.includes(graphType)) {\n    const htmlLabels = config.htmlLabels || ((_a = config.flowchart) == null ? void 0 : _a.htmlLabels);\n    const cssHtmlElements = [\"> *\", \"span\"];\n    const cssShapeElements = [\"rect\", \"polygon\", \"ellipse\", \"circle\", \"path\"];\n    const cssElements = htmlLabels ? cssHtmlElements : cssShapeElements;\n    for (const classId in classDefs) {\n      const styleClassDef = classDefs[classId];\n      if (!isEmpty(styleClassDef.styles)) {\n        cssElements.forEach(cssElement => {\n          cssStyles += cssImportantStyles(styleClassDef.id, cssElement, styleClassDef.styles);\n        });\n      }\n      if (!isEmpty(styleClassDef.textStyles)) {\n        cssStyles += cssImportantStyles(styleClassDef.id, \"tspan\", styleClassDef.textStyles);\n      }\n    }\n  }\n  return cssStyles;\n};\nconst createUserStyles = (config, graphType, classDefs, svgId) => {\n  const userCSSstyles = createCssStyles(config, graphType, classDefs);\n  const allStyles = getStyles(graphType, userCSSstyles, config.themeVariables);\n  return serialize(compile(`${svgId}{${allStyles}}`), stringify);\n};\nconst cleanUpSvgCode = (svgCode = \"\", inSandboxMode, useArrowMarkerUrls) => {\n  let cleanedUpSvg = svgCode;\n  if (!useArrowMarkerUrls && !inSandboxMode) {\n    cleanedUpSvg = cleanedUpSvg.replace(/marker-end=\"url\\(.*?#/g, 'marker-end=\"url(#');\n  }\n  cleanedUpSvg = decodeEntities(cleanedUpSvg);\n  cleanedUpSvg = cleanedUpSvg.replace(/<br>/g, \"<br/>\");\n  return cleanedUpSvg;\n};\nconst putIntoIFrame = (svgCode = \"\", svgElement) => {\n  const height = svgElement ? svgElement.viewBox.baseVal.height + \"px\" : IFRAME_HEIGHT;\n  const base64encodedSrc = btoa('<body style=\"' + IFRAME_BODY_STYLE + '\">' + svgCode + \"</body>\");\n  return `<iframe style=\"width:${IFRAME_WIDTH};height:${height};${IFRAME_STYLES}\" src=\"data:text/html;base64,${base64encodedSrc}\" sandbox=\"${IFRAME_SANDBOX_OPTS}\">\n  ${IFRAME_NOT_SUPPORTED_MSG}\n</iframe>`;\n};\nconst appendDivSvgG = (parentRoot, id2, enclosingDivId, divStyle, svgXlink) => {\n  const enclosingDiv = parentRoot.append(\"div\");\n  enclosingDiv.attr(\"id\", enclosingDivId);\n  if (divStyle) {\n    enclosingDiv.attr(\"style\", divStyle);\n  }\n  const svgNode = enclosingDiv.append(\"svg\").attr(\"id\", id2).attr(\"width\", \"100%\").attr(\"xmlns\", XMLNS_SVG_STD);\n  if (svgXlink) {\n    svgNode.attr(\"xmlns:xlink\", svgXlink);\n  }\n  svgNode.append(\"g\");\n  return parentRoot;\n};\nfunction sandboxedIframe(parentNode, iFrameId) {\n  return parentNode.append(\"iframe\").attr(\"id\", iFrameId).attr(\"style\", \"width: 100%; height: 100%;\").attr(\"sandbox\", \"\");\n}\nconst removeExistingElements = (doc, id2, divId, iFrameId) => {\n  var _a, _b, _c;\n  (_a = doc.getElementById(id2)) == null ? void 0 : _a.remove();\n  (_b = doc.getElementById(divId)) == null ? void 0 : _b.remove();\n  (_c = doc.getElementById(iFrameId)) == null ? void 0 : _c.remove();\n};\nconst render = async function (id2, text, svgContainingElement) {\n  var _a, _b, _c, _d;\n  addDiagrams();\n  reset();\n  const graphInit = utils.detectInit(text);\n  if (graphInit) {\n    directiveSanitizer(graphInit);\n    addDirective(graphInit);\n  }\n  const config = getConfig();\n  log.debug(config);\n  if (text.length > ((config == null ? void 0 : config.maxTextSize) ?? MAX_TEXTLENGTH)) {\n    text = MAX_TEXTLENGTH_EXCEEDED_MSG;\n  }\n  text = text.replace(/\\r\\n?/g, \"\\n\");\n  const idSelector = \"#\" + id2;\n  const iFrameID = \"i\" + id2;\n  const iFrameID_selector = \"#\" + iFrameID;\n  const enclosingDivID = \"d\" + id2;\n  const enclosingDivID_selector = \"#\" + enclosingDivID;\n  let root = select(\"body\");\n  const isSandboxed = config.securityLevel === SECURITY_LVL_SANDBOX;\n  const isLooseSecurityLevel = config.securityLevel === SECURITY_LVL_LOOSE;\n  const fontFamily = config.fontFamily;\n  if (svgContainingElement !== void 0) {\n    if (svgContainingElement) {\n      svgContainingElement.innerHTML = \"\";\n    }\n    if (isSandboxed) {\n      const iframe = sandboxedIframe(select(svgContainingElement), iFrameID);\n      root = select(iframe.nodes()[0].contentDocument.body);\n      root.node().style.margin = 0;\n    } else {\n      root = select(svgContainingElement);\n    }\n    appendDivSvgG(root, id2, enclosingDivID, `font-family: ${fontFamily}`, XMLNS_XLINK_STD);\n  } else {\n    removeExistingElements(document, id2, enclosingDivID, iFrameID);\n    if (isSandboxed) {\n      const iframe = sandboxedIframe(select(\"body\"), iFrameID);\n      root = select(iframe.nodes()[0].contentDocument.body);\n      root.node().style.margin = 0;\n    } else {\n      root = select(\"body\");\n    }\n    appendDivSvgG(root, id2, enclosingDivID);\n  }\n  text = encodeEntities(text);\n  let diag;\n  let parseEncounteredException;\n  try {\n    diag = await getDiagramFromText(text);\n  } catch (error2) {\n    diag = new Diagram(\"error\");\n    parseEncounteredException = error2;\n  }\n  const element = root.select(enclosingDivID_selector).node();\n  const graphType = diag.type;\n  const svg = element.firstChild;\n  const firstChild = svg.firstChild;\n  const diagramClassDefs = CLASSDEF_DIAGRAMS.includes(graphType) ? diag.renderer.getClasses(text, diag) : {};\n  const rules = createUserStyles(config, graphType,\n  // @ts-ignore convert renderer to TS.\n  diagramClassDefs, idSelector);\n  const style1 = document.createElement(\"style\");\n  style1.innerHTML = rules;\n  svg.insertBefore(style1, firstChild);\n  try {\n    await diag.renderer.draw(text, id2, version, diag);\n  } catch (e) {\n    renderer.draw(text, id2, version);\n    throw e;\n  }\n  const svgNode = root.select(`${enclosingDivID_selector} svg`);\n  const a11yTitle = (_b = (_a = diag.db).getAccTitle) == null ? void 0 : _b.call(_a);\n  const a11yDescr = (_d = (_c = diag.db).getAccDescription) == null ? void 0 : _d.call(_c);\n  addA11yInfo(graphType, svgNode, a11yTitle, a11yDescr);\n  root.select(`[id=\"${id2}\"]`).selectAll(\"foreignobject > *\").attr(\"xmlns\", XMLNS_XHTML_STD);\n  let svgCode = root.select(enclosingDivID_selector).node().innerHTML;\n  log.debug(\"config.arrowMarkerAbsolute\", config.arrowMarkerAbsolute);\n  svgCode = cleanUpSvgCode(svgCode, isSandboxed, evaluate(config.arrowMarkerAbsolute));\n  if (isSandboxed) {\n    const svgEl = root.select(enclosingDivID_selector + \" svg\").node();\n    svgCode = putIntoIFrame(svgCode, svgEl);\n  } else if (!isLooseSecurityLevel) {\n    svgCode = DOMPurify.sanitize(svgCode, {\n      ADD_TAGS: DOMPURIFY_TAGS,\n      ADD_ATTR: DOMPURIFY_ATTR\n    });\n  }\n  attachFunctions();\n  const tmpElementSelector = isSandboxed ? iFrameID_selector : enclosingDivID_selector;\n  const node = select(tmpElementSelector).node();\n  if (node && \"remove\" in node) {\n    node.remove();\n  }\n  if (parseEncounteredException) {\n    throw parseEncounteredException;\n  }\n  return {\n    svg: svgCode,\n    bindFunctions: diag.db.bindFunctions\n  };\n};\nfunction initialize(options = {}) {\n  var _a;\n  if ((options == null ? void 0 : options.fontFamily) && !((_a = options.themeVariables) == null ? void 0 : _a.fontFamily)) {\n    options.themeVariables = {\n      fontFamily: options.fontFamily\n    };\n  }\n  saveConfigFromInitialize(options);\n  if ((options == null ? void 0 : options.theme) && options.theme in theme) {\n    options.themeVariables = theme[options.theme].getThemeVariables(options.themeVariables);\n  } else if (options) {\n    options.themeVariables = theme.default.getThemeVariables(options.themeVariables);\n  }\n  const config = typeof options === \"object\" ? setSiteConfig(options) : getSiteConfig();\n  setLogLevel(config.logLevel);\n  addDiagrams();\n}\nfunction addA11yInfo(graphType, svgNode, a11yTitle, a11yDescr) {\n  setA11yDiagramInfo(svgNode, graphType);\n  addSVGa11yTitleDescription(svgNode, a11yTitle, a11yDescr, svgNode.attr(\"id\"));\n}\nconst mermaidAPI = Object.freeze({\n  render,\n  parse,\n  parseDirective,\n  initialize,\n  getConfig,\n  setConfig,\n  getSiteConfig,\n  updateSiteConfig,\n  reset: () => {\n    reset();\n  },\n  globalReset: () => {\n    reset(defaultConfig);\n  },\n  defaultConfig\n});\nsetLogLevel(getConfig().logLevel);\nreset(getConfig());\nexport { addFunction as a, decodeEntities as d, mermaidAPI as m };","map":null,"metadata":{},"sourceType":"module"}