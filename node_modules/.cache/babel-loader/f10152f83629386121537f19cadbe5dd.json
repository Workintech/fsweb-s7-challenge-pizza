{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ddryl\\\\Desktop\\\\workintech\\\\8.hafta\\\\fsweb-s7-challenge-pizza\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\nvar HSL = {\n  /* VARIABLES */\n  re: /^hsla?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?(?:deg|grad|rad|turn)?)\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?%)\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?%)(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?(%)?))?\\s*?\\)$/i,\n  hueRe: /^(.+?)(deg|grad|rad|turn)$/i,\n  /* HELPERS */\n  _hue2deg: function _hue2deg(hue) {\n    var match = hue.match(HSL.hueRe);\n    if (match) {\n      var _match = _slicedToArray(match, 3),\n        number = _match[1],\n        unit = _match[2];\n      switch (unit) {\n        case 'grad':\n          return _.channel.clamp.h(parseFloat(number) * .9);\n        case 'rad':\n          return _.channel.clamp.h(parseFloat(number) * 180 / Math.PI);\n        case 'turn':\n          return _.channel.clamp.h(parseFloat(number) * 360);\n      }\n    }\n    return _.channel.clamp.h(parseFloat(hue));\n  },\n  /* API */\n  parse: function parse(color) {\n    var charCode = color.charCodeAt(0);\n    if (charCode !== 104 && charCode !== 72) return; // 'h'/'H'\n    var match = color.match(HSL.re);\n    if (!match) return;\n    var _match2 = _slicedToArray(match, 6),\n      h = _match2[1],\n      s = _match2[2],\n      l = _match2[3],\n      a = _match2[4],\n      isAlphaPercentage = _match2[5];\n    return ChannelsReusable.set({\n      h: HSL._hue2deg(h),\n      s: _.channel.clamp.s(parseFloat(s)),\n      l: _.channel.clamp.l(parseFloat(l)),\n      a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n    }, color);\n  },\n  stringify: function stringify(channels) {\n    var h = channels.h,\n      s = channels.s,\n      l = channels.l,\n      a = channels.a;\n    if (a < 1) {\n      // HSLA\n      return \"hsla(\".concat(_.lang.round(h), \", \").concat(_.lang.round(s), \"%, \").concat(_.lang.round(l), \"%, \").concat(a, \")\");\n    } else {\n      // HSL\n      return \"hsl(\".concat(_.lang.round(h), \", \").concat(_.lang.round(s), \"%, \").concat(_.lang.round(l), \"%)\");\n    }\n  }\n};\n/* EXPORT */\nexport default HSL;","map":null,"metadata":{},"sourceType":"module"}